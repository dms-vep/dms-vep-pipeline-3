# Config for analysis

# ----------------------------------------------------------------------------
# Relative paths from your top-level Snakefile to where you have the pipeline
# submodule cloned, and where you build the docs. Typically your top-level
# Snakefile will be in the root directory and paths will be `dms-vep-pipeline`
# and `./`, but in this example they are upstream from this subdirectory.
# ----------------------------------------------------------------------------
pipeline_path: ../  # typically will be `dms-vep-pipeline` for real pipelines
docs: ../docs  # typically will be `docs` for real pipelines

# ----------------------------------------------------------------------------
# Details on repo, used for docs. Change this to details for your project.
# ----------------------------------------------------------------------------

github_repo: dms-vep-pipeline-3
github_user: dms-vep
github_branch: main  # main branch for repo, assume renamed from master -> main
description: Deep mutational scanning (DMS) pipeline for a viral entry protein (VEP)
year: 2023
authors: Jesse Bloom

# ----------------------------------------------------------------------------
# Site numbering, mutation classification, and neut standards
# ----------------------------------------------------------------------------

# Map sequential 1, 2, numbering of the protein to the desired
# final reference numbering scheme. Required to have columns named
# "sequential_site" and "reference_site". If you just want to number in
# sequential numbering for everything, just make both entries sequential.
# Should also have a column called "region" that assigns each site to a
# region of the protein (eg, domain like RBD or NTD).
site_numbering_map: data/site_numbering_map.csv

# Classify mutations into different categories, such as which ones are
# designed to be in the library. Should have columns "sequential_site",
# "amino_acid", and "mutation_type". If you don't have different categories
# of designed mutations, just include all of the intended mutations with
# "mutation_type" as "designed"
mutation_design_classification: data/mutation_design_classification.csv

# Neutralization standard barcodes. Should have columns "barcode" and "name"
# (giving name of this neutralization standard set). Can be empty CSV with
# those columns if no neutralization standards.
neut_standard_barcodes: data/neutralization_standard_barcodes.csv

# ----------------------------------------------------------------------------
# Parameters related to building barcode-variant lookup table
# ----------------------------------------------------------------------------

# There are two ways you can get the codon variants: download a pre-built codon
# variant table, or build them from PacBio CCSs yourself. 

# If using pre-built variants specify URL for pre-built codon-variant table and
# gene (codon) sequence (beginning with "http" or "ftp") or just path to file.
# If these next two variables are "null" instead, then the variants are built
# from scratch using parameters below.
prebuilt_variants: null
prebuilt_geneseq: null

# Parameters for building variants from PacBio sequencing, only needed if
# not using pre-built variants.
pacbio_runs: data/PacBio_runs.csv  # PacBio sequencing data
pacbio_amplicon: data/PacBio_amplicon.gb  # Genbank file with PacBio amplicon
pacbio_amplicon_specs: data/PacBio_feature_parse_specs.yaml  # alignparse feature parsing
variant_tags:  # variant tags in PacBio amplicon, or "null" if no tags
  variant_tag5:
    variant_1: G
    variant_2: C
    wildtype: A
  variant_tag3:
    variant_1: G
    variant_2: C
    wildtype: A
max_ccs_error_rate: 1.0e-4  # only keep CCS if gene/barcode error rate <= this
consensus_params:  # parameters for building PacBio consensus sequences
  max_sub_diffs: null
  max_indel_diffs: null
  max_minor_sub_frac: 0.2
  max_minor_indel_frac: 0.2
  min_support: 2

# ----------------------------------------------------------------------------
# Names of key outputs used across pipeline
# ----------------------------------------------------------------------------

# sequence of parental gene
gene_sequence_codon: results/gene_sequence/codon.fasta
gene_sequence_protein: results/gene_sequence/protein.fasta

# barcode-variant lookup table
codon_variants: results/variants/codon_variants.csv
